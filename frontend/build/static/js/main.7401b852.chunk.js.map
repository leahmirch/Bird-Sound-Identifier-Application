{"version":3,"sources":["Popup.js","App.js","index.js"],"names":["Popup","props","trigger","React","createElement","className","onClick","setTrigger","children","App","birdData","setBirdData","useState","bird","DataisLoaded","imageUrls","setImageUrls","birdHasChanged","setBirdHasChanged","popUpTrigger","setPopUpTrigger","birds","setBirds","birdDescription","setBirdDescription","isSpeaking","setIsSpeaking","isUpdating","setIsUpdating","intervalId","setIntervalId","selectedDate","setSelectedDate","filteredBirds","setFilteredBirds","searchQuery","setSearchQuery","dateRange","setDateRange","start","end","updateBirdLatest","useCallback","async","Axios","get","process","REACT_APP_API_HOST","then","res","birdInfo","data","birdDict","time","lat","lon","fetchBirdHistory","birdHistory","map","date","Date","created","toLocaleDateString","toLocaleTimeString","name","sort","a","b","renderBird","response","results","img","urls","regular","error","console","getBirdImages","log","birdName","status","extract","description","content_urls","desktop","page","headers","request","message","fetchBirdDescription","speakDescription","window","speechSynthesis","cancel","speech","SpeechSynthesisUtterance","lang","onend","speak","alert","startVoiceRecognition","recognition","webkitSpeechRecognition","continuous","interimResults","onstart","onresult","event","transcript","resultIndex","trim","toLowerCase","onerror","useEffect","id","setInterval","clearInterval","handleDateRangeChange","e","value","target","prev","filterBirds","filtered","filter","includes","birdDate","toggleUpdates","timeArray","toLocaleString","timeZone","split","renderTime","length","url","index","key","src","alt","type","placeholder","onChange","Array","from","Set","handleDateClick","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7401b852.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Popup.css';\r\n\r\nfunction Popup(props) {\r\n  return (props.trigger) ? (\r\n    <div className=\"popup\">\r\n      <div className=\"popup-inner\">\r\n        <button className=\"close-btn\" onClick={() => props.setTrigger(false)}>Close</button>\r\n        { props.children }\r\n      </div>\r\n    </div>\r\n  ) : \"\";\r\n}\r\n\r\nexport default Popup;\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport Axios from 'axios';\r\nimport Popup from './Popup';\r\nimport './App.css';\r\n\r\n\r\nexport default function App() {\r\n const [birdData, setBirdData] = useState({ bird: {}, DataisLoaded: false });\r\n const [imageUrls, setImageUrls] = useState([]);\r\n const [birdHasChanged, setBirdHasChanged] = useState(false);\r\n const [popUpTrigger, setPopUpTrigger] = useState(false);\r\n const [birds, setBirds] = useState([]);\r\n const [birdDescription, setBirdDescription] = useState('');\r\n const [isSpeaking, setIsSpeaking] = useState(false);\r\n const [isUpdating, setIsUpdating] = useState(true);\r\n const [intervalId, setIntervalId] = useState(null);\r\n const [selectedDate, setSelectedDate] = useState(null);\r\n const [filteredBirds, setFilteredBirds] = useState([]);\r\n const [searchQuery, setSearchQuery] = useState('');\r\n const [dateRange, setDateRange] = useState({ start: '', end: '' });\r\n\r\n\r\n const updateBirdLatest = useCallback(async () => {\r\n   await Axios.get(`http://${process.env.REACT_APP_API_HOST}:3001/birds/latest`)\r\n     .then((res) => {\r\n       const birdInfo = res.data.data;\r\n       var birdDict = {\r\n         time: birdInfo[0],\r\n         bird: birdInfo[1],\r\n         lat: birdInfo[2],\r\n         lon: birdInfo[3]\r\n       };\r\n       if (birdInfo[1] !== birdData.bird.bird) {\r\n         setBirdHasChanged(true);\r\n       }\r\n       setBirdData({\r\n         bird: birdDict,\r\n         DataisLoaded: true\r\n       });\r\n     });\r\n }, [birdData.bird.bird]);\r\n\r\n\r\n const fetchBirdHistory = useCallback(async () => {\r\n   await Axios.get(`http://${process.env.REACT_APP_API_HOST}:3001/birds`)\r\n     .then((res) => {\r\n       const birdHistory = res.data.data.map(bird => ({\r\n         date: new Date(bird.created).toLocaleDateString(),\r\n         time: new Date(bird.created).toLocaleTimeString(),\r\n         name: bird.bird,\r\n         lat: bird.lat,\r\n         lon: bird.lon,\r\n         created: new Date(bird.created) // Add the original date object for sorting\r\n       }));\r\n       birdHistory.sort((a, b) => b.created - a.created); // Sort by date in descending order\r\n       setBirds(birdHistory);\r\n     });\r\n }, []);\r\n\r\n\r\n const fetchBirdDescription = async (birdName) => {\r\n   try {\r\n     console.log(`Fetching description for bird: ${birdName}`);\r\n     const response = await Axios.get(`https://en.wikipedia.org/api/rest_v1/page/summary/${birdName}`);\r\n     console.log(\"API response status:\", response.status);\r\n     console.log(\"API response data:\", response.data);\r\n     if (response.data && response.data.extract) {\r\n       const description = `${response.data.extract}\\n\\nAppearance: The ${birdName} typically has distinctive features such as its size, color, and notable markings. For more details, visit ${response.data.content_urls.desktop.page}.`;\r\n       setBirdDescription(description);\r\n     } else {\r\n       setBirdDescription(\"Description not available\");\r\n     }\r\n   } catch (error) {\r\n     console.error(\"Error fetching bird description: \", error);\r\n     if (error.response) {\r\n       console.error(\"Response data:\", error.response.data);\r\n       console.error(\"Response status:\", error.response.status);\r\n       console.error(\"Response headers:\", error.response.headers);\r\n     } else if (error.request) {\r\n       console.error(\"Request data:\", error.request);\r\n     } else {\r\n       console.error(\"Error message:\", error.message);\r\n     }\r\n     setBirdDescription(\"Error fetching description\");\r\n   }\r\n };\r\n\r\n\r\n async function getBirdImages() {\r\n   const bird = birdData.bird.bird;\r\n   try {\r\n     const response = await Axios.get(\r\n       `https://api.unsplash.com/search/photos?query=${bird}&client_id=i7RoddcRb7XMxsfWJKJfI1SAuu4m7KPgz5Umdd7d3J4&per_page=6`\r\n     );\r\n     const data = response.data.results;\r\n     const imageUrls = data.map(img => img.urls.regular);\r\n     setImageUrls(imageUrls);\r\n   } catch (error) {\r\n     console.error(\"Error fetching images: \", error);\r\n   }\r\n }\r\n\r\n\r\n function renderBird() {\r\n   const { DataisLoaded, bird } = birdData;\r\n   if (!DataisLoaded) {\r\n     return <div>Loading...</div>;\r\n   } else {\r\n     if (birdHasChanged) {\r\n       getBirdImages();\r\n       fetchBirdDescription(bird.bird); // Fetch description\r\n       setBirdHasChanged(false);\r\n     }\r\n     return bird.bird;\r\n   }\r\n }\r\n\r\n\r\n function renderTime() {\r\n   const { DataisLoaded, bird } = birdData;\r\n   if (!DataisLoaded) {\r\n     return <div>Loading...</div>;\r\n   } else {\r\n     const utcTime = new Date(bird.time);\r\n     const convertedTime = utcTime.toLocaleString(\"en-US\", { timeZone: \"America/New_York\" });\r\n     const timeArray = convertedTime.split(\", \");\r\n     const timestring = `${timeArray[1]} on ${timeArray[0]}`;\r\n     return timestring;\r\n   }\r\n }\r\n\r\n\r\n function renderImages() {\r\n   if (imageUrls.length > 0) {\r\n     return (\r\n       <div className=\"images-container\">\r\n         {imageUrls.map((url, index) => (\r\n           <img key={index} src={url} alt={`Bird ${index + 1}`} className=\"bird-image\" />\r\n         ))}\r\n       </div>\r\n     );\r\n   }\r\n   return null;\r\n }\r\n\r\n\r\n const speakDescription = () => {\r\n   if ('speechSynthesis' in window) {\r\n     if (isSpeaking) {\r\n       window.speechSynthesis.cancel();\r\n       setIsSpeaking(false);\r\n     } else {\r\n       const speech = new SpeechSynthesisUtterance(birdDescription);\r\n       speech.lang = 'en-US';\r\n       speech.onend = () => {\r\n         setIsSpeaking(false);\r\n       };\r\n       window.speechSynthesis.speak(speech);\r\n       setIsSpeaking(true);\r\n     }\r\n   } else {\r\n     alert(\"Sorry, your browser doesn't support text to speech!\");\r\n   }\r\n };\r\n\r\n\r\n const toggleUpdates = () => {\r\n   if (isUpdating) {\r\n     clearInterval(intervalId);\r\n   } else {\r\n     const id = setInterval(() => {\r\n       updateBirdLatest();\r\n     }, 5000);\r\n     setIntervalId(id);\r\n   }\r\n   setIsUpdating(!isUpdating);\r\n };\r\n\r\n\r\n const startVoiceRecognition = useCallback(() => {\r\n   if ('webkitSpeechRecognition' in window) {\r\n     const recognition = new window.webkitSpeechRecognition();\r\n     recognition.lang = 'en-US';\r\n     recognition.continuous = true;\r\n     recognition.interimResults = false;\r\n\r\n\r\n     recognition.onstart = () => {\r\n       console.log(\"Voice recognition started.\");\r\n     };\r\n\r\n\r\n     recognition.onresult = (event) => {\r\n       const transcript = event.results[event.resultIndex][0].transcript.trim().toLowerCase();\r\n       console.log(\"Voice command received:\", transcript);\r\n\r\n\r\n       if (transcript === \"read description\") {\r\n         speakDescription();\r\n       }\r\n     };\r\n\r\n\r\n     recognition.onerror = (event) => {\r\n       console.error(\"Voice recognition error:\", event.error);\r\n     };\r\n\r\n\r\n     recognition.onend = () => {\r\n       console.log(\"Voice recognition ended.\");\r\n       startVoiceRecognition(); // Restart recognition\r\n     };\r\n\r\n\r\n     recognition.start();\r\n     console.log(\"Voice recognition initialized.\");\r\n   } else {\r\n     alert(\"Sorry, your browser doesn't support voice recognition!\");\r\n   }\r\n }, [speakDescription]);\r\n\r\n\r\n useEffect(() => {\r\n   const id = setInterval(() => {\r\n     updateBirdLatest();\r\n   }, 5000);\r\n   setIntervalId(id);\r\n   return () => clearInterval(id);\r\n }, [updateBirdLatest]);\r\n\r\n\r\n useEffect(() => {\r\n   fetchBirdHistory();\r\n }, [fetchBirdHistory]);\r\n\r\n\r\n useEffect(() => {\r\n   startVoiceRecognition();\r\n }, [startVoiceRecognition]);\r\n\r\n\r\n const handleDateClick = (date) => {\r\n   if (selectedDate === date) {\r\n     setSelectedDate(null); // Close the table if the same date is clicked again\r\n     setFilteredBirds([]);\r\n   } else {\r\n     setSelectedDate(date);\r\n     setFilteredBirds(birds.filter(bird => bird.date === date));\r\n   }\r\n };\r\n\r\n\r\n const handleSearchChange = (e) => {\r\n   setSearchQuery(e.target.value);\r\n };\r\n\r\n\r\n const handleDateRangeChange = (e) => {\r\n   const { name, value } = e.target;\r\n   setDateRange((prev) => ({ ...prev, [name]: value }));\r\n };\r\n\r\n\r\n const filterBirds = () => {\r\n   let filtered = birds;\r\n   if (searchQuery) {\r\n     filtered = filtered.filter(bird => bird.name.toLowerCase().includes(searchQuery.toLowerCase()));\r\n   }\r\n   if (dateRange.start && dateRange.end) {\r\n     filtered = filtered.filter(bird => {\r\n       const birdDate = new Date(bird.created);\r\n       return birdDate >= new Date(dateRange.start) && birdDate <= new Date(dateRange.end);\r\n     });\r\n   }\r\n   setFilteredBirds(filtered);\r\n };\r\n\r\n\r\n useEffect(() => {\r\n   filterBirds();\r\n }, [searchQuery, dateRange, birds]);\r\n\r\n\r\n return (\r\n   <div>\r\n     <main>\r\n       <header className=\"header\">\r\n         <h1><i className=\"fas fa-dove\"></i> Bird Sound Identifier</h1>\r\n         <div>\r\n           <button className=\"update-btn\" onClick={toggleUpdates}>\r\n             {isUpdating ? 'Stop Updates' : 'Start Updates'}\r\n           </button>\r\n           <button className=\"history-btn\" onClick={() => { setPopUpTrigger(true) }}>\r\n             <i className=\"fas fa-history\"></i> Bird History\r\n           </button>\r\n         </div>\r\n       </header>\r\n       <div className='parent-container'>\r\n         <h2 className=\"bird-name\">{renderBird()}</h2> {/* New bird name header */}\r\n         <div className=\"fun-facts\">\r\n           <h3>Description:</h3>\r\n           <p>{birdDescription}</p>\r\n           <button className=\"read-btn\" onClick={speakDescription}>\r\n             {isSpeaking ? 'Stop Reading' : 'Read Description'}\r\n           </button>\r\n         </div>\r\n         <h1>Latest bird I heard was a {renderBird()} at {renderTime()}</h1>\r\n         <div>\r\n           {renderImages()}\r\n         </div>\r\n       </div>\r\n     </main>\r\n     <Popup trigger={popUpTrigger} setTrigger={setPopUpTrigger}>\r\n       <div className=\"table-container\">\r\n         <div className=\"search-filter-container\">\r\n           <input\r\n             type=\"text\"\r\n             placeholder=\"Search by bird name\"\r\n             value={searchQuery}\r\n             onChange={handleSearchChange}\r\n           />\r\n           <input\r\n             type=\"date\"\r\n             name=\"start\"\r\n             placeholder=\"Start Date\"\r\n             value={dateRange.start}\r\n             onChange={handleDateRangeChange}\r\n           />\r\n           <input\r\n             type=\"date\"\r\n             name=\"end\"\r\n             placeholder=\"End Date\"\r\n             value={dateRange.end}\r\n             onChange={handleDateRangeChange}\r\n           />\r\n         </div>\r\n         <div className=\"date-container\">\r\n           {Array.from(new Set(birds.map(bird => bird.date))).map(date => (\r\n             <button key={date} onClick={() => handleDateClick(date)} className=\"date-button\">\r\n               {date}\r\n             </button>\r\n           ))}\r\n         </div>\r\n         <div className=\"bird-table\">\r\n           {selectedDate && (\r\n             <table className=\"table table-striped\">\r\n               <thead>\r\n                 <tr>\r\n                   <th>Time</th>\r\n                   <th>Name</th>\r\n                   <th>Latitude</th>\r\n                   <th>Longitude</th>\r\n                 </tr>\r\n               </thead>\r\n               <tbody>\r\n                 {filteredBirds.map((bird, index) => (\r\n                   <tr key={index}>\r\n                     <td>{bird.time}</td>\r\n                     <td>{bird.name}</td>\r\n                     <td>{bird.lat}</td>\r\n                     <td>{bird.lon}</td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n             </table>\r\n           )}\r\n         </div>\r\n       </div>\r\n     </Popup>\r\n   </div>\r\n );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}